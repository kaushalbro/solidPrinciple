<?php

namespace {{ controllerPath }};

use {{ repoPath }};
use {{ modelPath }};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\DataTables;


class UserController extends Controller
{

    protected $repository;


    public function __construct()
    {
        $this->repository =  new UserRepository(new User());
    }

    public function index()
    {
        $allUser=$this->repository->getAll();
        return view("backend.admin.users.index",compact('allUser'));
    }

    public function getUsers(Request $request) {
         $users = User::all();
        return Datatables::of($users)
            ->addIndexColumn()
            ->addColumn('action', function($user){
                return $this->actionButtons($user);
            })
            ->addColumn('roles',function($user){
                return $user->id;
            })
            ->rawColumns(['action'])
            ->make(true);
    }

    public function actionButtons($user){
         $is_auth_id=(Auth::id()==$user->id)?true:false;
        $actionBtns='';
             $show_btn = '<a href="'.route("users.show", $user->id).'" class="actions btn btn-sm btn-info" data-tooltip="true" title="Show">
                <i class="far fa-eye" aria-hidden="true"></i></a>';
              if(!$is_auth_id)
              {
                  $delete_btn= '<a class="btn btn-danger btn-sm delete-asset" title="delete" onclick="return false;">
                <i class="fas fa-trash"></i></a>';
                  $edit_btn= '<a href="/" class="actions btn btn-sm btn-warning" data-tooltip="true" title="Edit">
                <i class="fas fa-pencil-alt" aria-hidden="true"></i></a>';
              }else{
                  $delete_btn ='';
                  $edit_btn='';
              }
            $actionBtns = '
                <nobr>
                    '.$show_btn.' '.$edit_btn.' '.$delete_btn.'
                </nobr>
                ';
            return $actionBtns;
    }

    public function store(CreateUserRequest $request)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->create($attributes);
            DB::commit();
            return redirect()->route('')->with('success', 'User created successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update User : ".$e->getMessage());
          }

    }


    public function show($id)
    {
         $User=$this->repository->getById($id);
         return view("",compact('User'));
    }

    public function update(CreateUserRequest $request, $id)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->update($id,$attributes);
            DB::commit();
            return redirect()->route('')->with('success','User updated successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update. User : " .$e->getMessage());
          }
    }

    public function destroy($id)
    {
      try {
            DB::beginTransaction();
            $this->repository->delete($id);
            DB::commit();
            return redirect()->route('')->with('success','User deleted successfully.');
          } catch (\Exception $e) {
             DB::rollback();
             return redirect()->back()->withInput()->with('failed', 'Failed to delete User : '.$e->getMessage());
          }
    }
}
