<?php

namespace {{ namespace }};

use {{ rootNamespace }}Repositories\{{ classname }}Repository;
use {{ rootNamespace }}Models\{{ classname }};
use {{ rootNamespace }}Http\Requests\Create{{ classname }}Request;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\DataTables;


class {{ classname }}Controller extends Controller
{

    protected $repository;
    protected $view_path="backend.admin.{{ viewfolder }}.";
    protected $model;
    protected $user_permissions;


    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware(['permission:{{ viewfolder }}-view|{{ viewfolder }}-create|{{ viewfolder }}-edit|{{ viewfolder }}-delete'], ['only' => ['show']]);
        $this->middleware(['permission:{{ viewfolder }}-create'], ['only' => ['create', 'store', 'show']]);
        $this->middleware(['permission:{{ viewfolder }}-edit'], ['only' => ['edit', 'update', 'show']]);
        $this->middleware(['permission:{{ viewfolder }}-delete'], ['only' => ['destroy']]);
        $this->middleware(['permission:{{ viewfolder }}-view'], ['only' => ['index']]);
        $this->model = new {{ classname }}();
        $this->user_permissions = "";
        $this->repository =  new {{ classname }}Repository(new {{ classname }}());
    }

    public function index()
    {
        ${{ viewfolder }}s=$this->repository->getAll();
        return view($this->view_path."index",compact('{{ viewfolder }}s'));
    }

    public function getList(Request $request)
    {
        ${{ viewfolder }}s=$this->repository->getAll();
             return Datatables::of(${{ viewfolder }}s)
                    ->addIndexColumn()
                    ->addColumn('action', function(${{ viewfolder }}){
                        return $this->actionButtons(${{ viewfolder }});
                    })
                    ->rawColumns(['action'])
                    ->make(true);
    }
        public function actionButtons(${{ viewfolder }}){
             $is_auth_id=(Auth::id()==${{ viewfolder }}->id)?true:false;
            $actionBtns='';
                 $show_btn = '<a href="'.route("{{ viewfolder }}s.show", ${{ viewfolder }}->id).'" class="actions btn btn-sm btn-info" data-tooltip="true" title="Show">
                    <i class="far fa-eye" aria-hidden="true"></i></a>';
               //   if(!$is_auth_id)  }}
                 // {
                      $delete_btn= '<a class="btn btn-danger btn-sm delete-asset" title="delete" onclick="return false;">
                    <i class="fas fa-trash"></i></a>';
                      $edit_btn= '<a href="/" class="actions btn btn-sm btn-warning" data-tooltip="true" title="Edit">
                    <i class="fas fa-pencil-alt" aria-hidden="true"></i></a>';
                  //}else{
                    //  $delete_btn ='';
                    //  $edit_btn='';
                  //}
                $actionBtns = '
                    <nobr>
                        '.$show_btn.' '.$edit_btn.' '.$delete_btn.'
                    </nobr>
                    ';
                return $actionBtns;
        }

    public function show($id)
    {
         ${{ viewfolder }}=$this->repository->getById($id);
         if(\request()->expectsJson()){
              return response()->json([]);
         }
         return view($this->view_path."show",compact('{{ viewfolder }}'));
    }

    public function edit($id)
    {
          ${{ viewfolder }}=$this->repository->getById($id);
          return view($this->view_path."edit",compact('{{ viewfolder }}'));
    }

    public function create()
    {
         return view($this->view_path."create");
    }

    public function store(Create{{ classname }}Request $request)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->create($attributes);
            DB::commit();
            if($request->expectsJson()){
              return response()->json([]);
            }
            return redirect()->back()->with('success', '{{ classname }} created successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update {{ classname }} : ".$e->getMessage());
          }

    }



    public function update(Create{{ classname }}Request $request, $id)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->update($id,$attributes);
            DB::commit();
            if($request->expectsJson()){
              return response()->json([]);
            }
            return redirect()->route('')->with('success','{{ classname }} updated successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update. {{ classname }} : " .$e->getMessage());
          }
    }

    public function destroy($id)
    {
      try {
            DB::beginTransaction();
            $this->repository->delete($id);
            DB::commit();
            if($request->expectsJson()){
              return response()->json([]);
            }
            return redirect()->route('')->with('success','{{ classname }} deleted successfully.');
          } catch (\Exception $e) {
             DB::rollback();
             return redirect()->back()->withInput()->with('failed', 'Failed to delete {{ classname }} : '.$e->getMessage());
          }
    }
}
