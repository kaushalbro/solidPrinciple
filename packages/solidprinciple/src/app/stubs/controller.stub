<?php

namespace {{ namespace }};

use {{ rootNamespace }}Repositories\{{ classname }}Repository;
use {{ rootNamespace }}Models\{{ classname }};
use {{ rootNamespace }}Http\Requests\Create{{ classname }}Request;
use Illuminate\Support\Facades\DB;


class {{ classname }}Controller extends Controller
{

    protected $repository;


    public function __construct()
    {
        $this->repository =  new {{ classname }}Repository(new {{ classname }}());
    }

    public function index()
    {
        $all{{ classname }}=$this->repository->getAll();
        return view("",compact('all{{ classname }}'));
    }


    public function store(Create{{ classname }}Request $request)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->create($attributes);
            DB::commit();
            return redirect()->route('')->with('success', '{{ classname }} created successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update {{ classname }} : ".$e->getMessage());
          }

    }


    public function show($id)
    {
         ${{ classname }}=$this->repository->getById($id);
         return view("",compact('{{ classname }}'));
    }

    public function update(Create{{ classname }}Request $request, $id)
    {
      try {
            DB::beginTransaction();
            $attributes= $request->only($this->repository->getFillable());
            $this->repository->update($id,$attributes);
            DB::commit();
            return redirect()->route('')->with('success','{{ classname }} updated successfully.');
          } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withInput()->with('failed', "Failed to update. {{ classname }} : " .$e->getMessage());
          }
    }

    public function destroy($id)
    {
      try {
            DB::beginTransaction();
            $this->repository->delete($id);
            DB::commit();
            return redirect()->route('')->with('success','{{ classname }} deleted successfully.');
          } catch (\Exception $e) {
             DB::rollback();
             return redirect()->back()->withInput()->with('failed', 'Failed to delete {{ classname }} : '.$e->getMessage());
          }
    }
}
